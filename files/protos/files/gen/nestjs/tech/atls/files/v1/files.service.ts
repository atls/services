// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               unknown
// source: tech/atls/files/v1/files.service.proto

import { Metadata }                     from '@grpc/grpc-js'
import { UntypedServiceImplementation } from '@grpc/grpc-js'
import { GrpcMethod }                   from '@nestjs/microservices'
import { GrpcStreamMethod }             from '@nestjs/microservices'
/* eslint-disable */
import { handleUnaryCall }              from '@grpc/grpc-js'
import { Observable }                   from 'rxjs'

import { ConfirmUploadRequest }         from './files.payloads.js'
import { ConfirmUploadResponse }        from './files.payloads.js'
import { CreateUploadRequest }          from './files.payloads.js'
import { CreateUploadResponse }         from './files.payloads.js'
import { ListFilesRequest }             from './files.payloads.js'
import { ListFilesResponse }            from './files.payloads.js'

export const protobufPackage = 'tech.atls.files.v1'

export const TECH_ATLS_FILES_V1_PACKAGE_NAME = 'tech.atls.files.v1'

export interface FilesServiceClient {
  listFiles(request: ListFilesRequest, metadata?: Metadata): Observable<ListFilesResponse>

  createUpload(request: CreateUploadRequest, metadata?: Metadata): Observable<CreateUploadResponse>

  confirmUpload(
    request: ConfirmUploadRequest,
    metadata?: Metadata
  ): Observable<ConfirmUploadResponse>
}

export interface FilesServiceController {
  listFiles(
    request: ListFilesRequest,
    metadata?: Metadata
  ): Promise<ListFilesResponse> | Observable<ListFilesResponse> | ListFilesResponse

  createUpload(
    request: CreateUploadRequest,
    metadata?: Metadata
  ): Promise<CreateUploadResponse> | Observable<CreateUploadResponse> | CreateUploadResponse

  confirmUpload(
    request: ConfirmUploadRequest,
    metadata?: Metadata
  ): Promise<ConfirmUploadResponse> | Observable<ConfirmUploadResponse> | ConfirmUploadResponse
}

export function FilesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['listFiles', 'createUpload', 'confirmUpload']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('FilesService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('FilesService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const FILES_SERVICE_NAME = 'FilesService'

export type FilesServiceService = typeof FilesServiceService
export const FilesServiceService = {
  listFiles: {
    path: '/tech.atls.files.v1.FilesService/ListFiles',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListFilesRequest) =>
      Buffer.from(ListFilesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListFilesRequest.decode(value),
    responseSerialize: (value: ListFilesResponse) =>
      Buffer.from(ListFilesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListFilesResponse.decode(value),
  },
  createUpload: {
    path: '/tech.atls.files.v1.FilesService/CreateUpload',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUploadRequest) =>
      Buffer.from(CreateUploadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateUploadRequest.decode(value),
    responseSerialize: (value: CreateUploadResponse) =>
      Buffer.from(CreateUploadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateUploadResponse.decode(value),
  },
  confirmUpload: {
    path: '/tech.atls.files.v1.FilesService/ConfirmUpload',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ConfirmUploadRequest) =>
      Buffer.from(ConfirmUploadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfirmUploadRequest.decode(value),
    responseSerialize: (value: ConfirmUploadResponse) =>
      Buffer.from(ConfirmUploadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfirmUploadResponse.decode(value),
  },
} as const

export interface FilesServiceServer extends UntypedServiceImplementation {
  listFiles: handleUnaryCall<ListFilesRequest, ListFilesResponse>
  createUpload: handleUnaryCall<CreateUploadRequest, CreateUploadResponse>
  confirmUpload: handleUnaryCall<ConfirmUploadRequest, ConfirmUploadResponse>
}
