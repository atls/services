// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               unknown
// source: tech/atls/files/v1/files.payloads.proto

/* eslint-disable */
import { BinaryReader } from '@bufbuild/protobuf/wire'
import { BinaryWriter } from '@bufbuild/protobuf/wire'

import { File }         from './files.types.js'

export const protobufPackage = 'tech.atls.files.v1'

export interface ListFilesRequest {
  pager?: ListFilesRequest_Pager | null
  query?: ListFilesRequest_Query | null
  order?: ListFilesRequest_Order | null
}

export enum ListFilesRequest_OrderDirection {
  ORDER_DIRECTION_ASC_UNSPECIFIED = 0,
  ORDER_DIRECTION_DESC = 1,
  UNRECOGNIZED = -1,
}

export interface ListFilesRequest_Pager {
  offset: number
  take: number
}

export interface ListFilesRequest_IncludeCondition {
  values: string[]
}

export interface ListFilesRequest_EqualCondition {
  value: string
}

export interface ListFilesRequest_IdQuery {
  eq?: ListFilesRequest_EqualCondition | null
  in?: ListFilesRequest_IncludeCondition | null
}

export interface ListFilesRequest_Query {
  id?: ListFilesRequest_IdQuery | null
}

export interface ListFilesRequest_Order {
  field: string
  direction: ListFilesRequest_OrderDirection
}

export interface ListFilesResponse {
  files: File[]
  hasNextPage: boolean
}

export interface CreateUploadRequest {
  bucket: string
  name: string
  size: number
}

export interface CreateUploadResponse {
  id: string
  url: string
}

export interface ConfirmUploadRequest {
  id: string
}

export interface ConfirmUploadResponse {
  id: string
  url: string
}

export const TECH_ATLS_FILES_V1_PACKAGE_NAME = 'tech.atls.files.v1'

function createBaseListFilesRequest(): ListFilesRequest {
  return {}
}

export const ListFilesRequest: MessageFns<ListFilesRequest> = {
  encode(message: ListFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pager !== undefined && message.pager !== null) {
      ListFilesRequest_Pager.encode(message.pager, writer.uint32(10).fork()).join()
    }
    if (message.query !== undefined && message.query !== null) {
      ListFilesRequest_Query.encode(message.query, writer.uint32(18).fork()).join()
    }
    if (message.order !== undefined && message.order !== null) {
      ListFilesRequest_Order.encode(message.order, writer.uint32(26).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.pager = ListFilesRequest_Pager.decode(reader, reader.uint32())
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.query = ListFilesRequest_Query.decode(reader, reader.uint32())
          continue
        }
        case 3: {
          if (tag !== 26) {
            break
          }

          message.order = ListFilesRequest_Order.decode(reader, reader.uint32())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_Pager(): ListFilesRequest_Pager {
  return { offset: 0, take: 0 }
}

export const ListFilesRequest_Pager: MessageFns<ListFilesRequest_Pager> = {
  encode(message: ListFilesRequest_Pager, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offset !== 0) {
      writer.uint32(8).int32(message.offset)
    }
    if (message.take !== 0) {
      writer.uint32(16).int32(message.take)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_Pager {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_Pager()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.offset = reader.int32()
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.take = reader.int32()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_IncludeCondition(): ListFilesRequest_IncludeCondition {
  return { values: [] }
}

export const ListFilesRequest_IncludeCondition: MessageFns<ListFilesRequest_IncludeCondition> = {
  encode(
    message: ListFilesRequest_IncludeCondition,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_IncludeCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_IncludeCondition()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.values.push(reader.string())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_EqualCondition(): ListFilesRequest_EqualCondition {
  return { value: '' }
}

export const ListFilesRequest_EqualCondition: MessageFns<ListFilesRequest_EqualCondition> = {
  encode(
    message: ListFilesRequest_EqualCondition,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.value !== '') {
      writer.uint32(10).string(message.value)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_EqualCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_EqualCondition()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.value = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_IdQuery(): ListFilesRequest_IdQuery {
  return {}
}

export const ListFilesRequest_IdQuery: MessageFns<ListFilesRequest_IdQuery> = {
  encode(
    message: ListFilesRequest_IdQuery,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.eq !== undefined && message.eq !== null) {
      ListFilesRequest_EqualCondition.encode(message.eq, writer.uint32(10).fork()).join()
    }
    if (message.in !== undefined && message.in !== null) {
      ListFilesRequest_IncludeCondition.encode(message.in, writer.uint32(18).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_IdQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_IdQuery()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.eq = ListFilesRequest_EqualCondition.decode(reader, reader.uint32())
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.in = ListFilesRequest_IncludeCondition.decode(reader, reader.uint32())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_Query(): ListFilesRequest_Query {
  return {}
}

export const ListFilesRequest_Query: MessageFns<ListFilesRequest_Query> = {
  encode(message: ListFilesRequest_Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== null) {
      ListFilesRequest_IdQuery.encode(message.id, writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_Query()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = ListFilesRequest_IdQuery.decode(reader, reader.uint32())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesRequest_Order(): ListFilesRequest_Order {
  return { field: '', direction: 0 }
}

export const ListFilesRequest_Order: MessageFns<ListFilesRequest_Order> = {
  encode(message: ListFilesRequest_Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== '') {
      writer.uint32(10).string(message.field)
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest_Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesRequest_Order()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.field = reader.string()
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.direction = reader.int32() as any
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseListFilesResponse(): ListFilesResponse {
  return { files: [], hasNextPage: false }
}

export const ListFilesResponse: MessageFns<ListFilesResponse> = {
  encode(message: ListFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      File.encode(v!, writer.uint32(10).fork()).join()
    }
    if (message.hasNextPage !== false) {
      writer.uint32(16).bool(message.hasNextPage)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseListFilesResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.files.push(File.decode(reader, reader.uint32()))
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.hasNextPage = reader.bool()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseCreateUploadRequest(): CreateUploadRequest {
  return { bucket: '', name: '', size: 0 }
}

export const CreateUploadRequest: MessageFns<CreateUploadRequest> = {
  encode(message: CreateUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== '') {
      writer.uint32(10).string(message.bucket)
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name)
    }
    if (message.size !== 0) {
      writer.uint32(24).int32(message.size)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCreateUploadRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.bucket = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.name = reader.string()
          continue
        }
        case 3: {
          if (tag !== 24) {
            break
          }

          message.size = reader.int32()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseCreateUploadResponse(): CreateUploadResponse {
  return { id: '', url: '' }
}

export const CreateUploadResponse: MessageFns<CreateUploadResponse> = {
  encode(message: CreateUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    if (message.url !== '') {
      writer.uint32(18).string(message.url)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCreateUploadResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.url = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseConfirmUploadRequest(): ConfirmUploadRequest {
  return { id: '' }
}

export const ConfirmUploadRequest: MessageFns<ConfirmUploadRequest> = {
  encode(message: ConfirmUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseConfirmUploadRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

function createBaseConfirmUploadResponse(): ConfirmUploadResponse {
  return { id: '', url: '' }
}

export const ConfirmUploadResponse: MessageFns<ConfirmUploadResponse> = {
  encode(message: ConfirmUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    if (message.url !== '') {
      writer.uint32(18).string(message.url)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseConfirmUploadResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.url = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
}
